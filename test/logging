#!/usr/bin/env bash

# Common bash functions.
# Copyright (C) 2025 James Hanlon [mailto:jim@hanlonsoftware.com]
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

set -eu

function run() {
    docker run -i --rm ${DOCKER_RUN_ARGS:-} 1121citrus/ha-bash-base:latest
}

status=0


#### debug()

{ [[ $(echo debug message | run 2>&1) =~ 2[0-9]{3}(0[1-9]|1[0,1,2])(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3])([0-5][0-9]){2}\ bash\ \[DEBUG\]\ message ]] && echo debug succeeded; } || { echo debug failed; status=1; }


#### dryrun()

{ [[ $(echo dryrun message | run 2>&1) =~ 2[0-9]{3}(0[1-9]|1[0,1,2])(0[1-9]|[12][0-9]|3[01])T(0[1-9]|1[0-9]|2[0-3])(0[1-9]|[1-5][0-9]){2}\ bash\ \[DRYRUN\]\ message ]] && echo dryrun succeeded; } || { echo dryrun failed; status=1; }


#### error()

{ [[ $(echo error message | run 2>&1) =~ 2[0-9]{3}(0[1-9]|1[0,1,2])(0[1-9]|[12][0-9]|3[01])T(0[1-9]|1[0-9]|2[0-3])(0[1-9]|[1-5][0-9]){2}\ bash\ \[ERROR\]\ message ]] && echo error succeeded; } || { echo error failed; status=1; }


#### ignore()

{ [[ $(echo ignore message | run 2>&1) =~ 2[0-9]{3}(0[1-9]|1[0,1,2])(0[1-9]|[12][0-9]|3[01])T(0[1-9]|1[0-9]|2[0-3])(0[1-9]|[1-5][0-9]){2}\ bash\ \[IGNORE\]\ message ]] && echo ignore succeeded; } || { echo ignore failed; status=1; }


#### info()

{ [[ $(echo info message | run 2>&1) =~ 2[0-9]{3}(0[1-9]|1[0,1,2])(0[1-9]|[12][0-9]|3[01])T(0[1-9]|1[0-9]|2[0-3])(0[1-9]|[1-5][0-9]){2}\ bash\ \[INFO\]\ message ]] && echo info succeeded; } || { echo info failed; status=1; }


#### warn()

{ [[ $(echo warn message | run 2>&1) =~ 2[0-9]{3}(0[1-9]|1[0,1,2])(0[1-9]|[12][0-9]|3[01])T(0[1-9]|1[0-9]|2[0-3])(0[1-9]|[1-5][0-9]){2}\ bash\ \[WARN\]\ message ]] && echo warn succeeded; } || { echo warn failed; status=1; }


#### warning()

{ [[ $(echo warning message | run 2>&1) =~ 2[0-9]{3}(0[1-9]|1[0,1,2])(0[1-9]|[12][0-9]|3[01])T(0[1-9]|1[0-9]|2[0-3])(0[1-9]|[1-5][0-9]){2}\ bash\ \[WARN\]\ message ]] && echo warning succeeded; } || { echo warning failed; status=1; }


exit $status


